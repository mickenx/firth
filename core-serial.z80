; serial I/O

initSerial:
    ld HL,0
    ld (serbufused),HL

    ld HL,serbuf
    ld (serinptr),HL
    ld (serrdptr),HL

    ld HL, linebuf
    ld (lineBufStart), HL
    ld (currkey), HL
    ld (linebuftop), HL

    ld HL, LINE_BUFSIZE
    ld (lineBufSize), HL

    ld A,rts_low
    out ($80),A                             ; initialise acia
    im 1
    ei
    ret

serialIn:
;serialInt:
                PUSH    AF
                PUSH    HL

                ; Check if there is a char in channel A
                ; If not, there is a char in channel B
                SUB     A
                OUT     (SIOA_C),A
                IN      A,(SIOA_C)      ; Status byte D2=TX Buff Empty, D0=RX char ready
                
serialIntA:
                LD      HL,(serInPtr)
                INC     HL
                LD      A,L
                CP      (serABuf+SER_BUFSIZE) & $FF
                JR      NZ, notAWrap
                LD      HL,serABuf
notAWrap:
                LD      (serInPtr),HL
                IN      A,(SIOA_D)
                LD      (HL),A

                LD      A,(serBufUsed)
                INC     A
                LD      (serBufUsed),A
                CP      SER_FULLSIZE
                JR      C,rtsA0
                LD      A,$05
                OUT     (SIOA_C),A
                LD      A,RTS_HIGH
                OUT     (SIOA_C),A
rtsA0:
                POP     HL
                POP     AF
                EI
                RETI


                

;    push AF
;    push HL

;    in A,($80)
;    and $01             ; Check if interupt due to read lineBuf full
;    _if nz
;        in A,($81)
;        push AF
;        ld A,(serBufUsed)
;        cp SER_BUFSIZE     ; If full then ignore
;        _if z
;            pop AF
;        _else
;            ld HL,(serInPtr)
;            inc HL
;            ld A,L             ; Only need to check low byte becasuse lineBuf<256 bytes
;            cp (serBuf + SER_BUFSIZE) & $FF
;            _if z
;                ld HL,serBuf
;            _endif
;            ld (serInPtr),HL
 ;           pop AF
 ;           ld (HL),A
 ;           ld A,(serBufUsed)
 ;           inc A
 ;           ld (serBufUsed),A
 ;           cp SER_FULLSIZE
 ;           _if nc
 ;               ld A,RTS_HIGH
 ;               out ($80),A
 ;           _endif
 ;       _endif
 ;   _endif
 ;   pop HL
 ;   pop AF
 ;   ei
  ;  ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; getc - input
; returns: A = input char
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

getc:
.if TESTMODE

    push HL
    ld HL, (char_pointer)
    ld A, (HL)
    inc HL
    ld (char_pointer), HL
    pop HL
    ret

.else
    _do
        ld A,(serBufUsed)
        cp $00
    _until nz
    _enddo
    push HL
    ld HL,(serRdPtr)
    inc HL
    ld A,L             ; Only need to check low byte because lineBuf<256 bytes
    cp (serBuf + SER_BUFSIZE) & $FF
    _if z
        ld HL,serBuf
    _endif
    di
    ld (serRdPtr),HL
    ld A,(serBufUsed)
    dec A
    ld (serBufUsed),A
    cp SER_EMPTYSIZE
    _if c
        ld A,RTS_LOW
        out ($80),A
    _endif
    ld A,(HL)
    ei
    pop HL
    ret                      ; Char ready in A
.endif

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; putc - output a character
; params: A = char to output
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

putc:
    conout:         PUSH    AF              ; Store character
                
                JR      conoutA1
conoutA:
                PUSH    AF

conoutA1:       CALL    CKSIOA          ; See if SIO channel A is finished transmitting
                JR      Z,conoutA1      ; Loop until SIO flag signals ready
                POP     AF              ; RETrieve character
                OUT     (SIOA_D),A      ; OUTput the character
                RET


;    push     AF              ; STORE character
;    _do
;        in A,($80)         ; Status byte
;        bit 1,A             ; Set Zero flag if still transmitting character
;    _until nz
;    _enddo
;    pop AF              ; Retrieve character
;    out ($81),A         ; Output the character
;    ret

inputReady:
    ld A,(serBufUsed)
    cp $0
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; getline - input line of text ***
; params: HL = addr, DE = max (currently up to 255)
; returns: BC = length - up to 255
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

getline:
    push AF
    push HL
    PRINT_STR TXT_PROMPT
    pop HL
    push HL
    ld BC, 0
    _do
        _do
            call getc
            cp $08
            _if z
                checkZeroWord B,C
                _if nz
                    dec HL
                    dec BC
                    ld a, $08
                    call putc
                    call printSpace
                    ld A, $08
                    call putc
                _endif
            _else
                ld (HL), A
                inc HL
                inc BC
                bit 7,a
                _if z
                    call putc
                _endif

                cp "\r"
                jr z, getLineCheck
                cp "\n"
                jr z, getLineCheck
                ld A, E
                cp C
                jr c, getLineCheck
            _endif
        _enddo
getLineCheck:
        ld a, 0
        cp c
    _until nz
    _enddo
    pop AF
    pop HL
    call printCR
    ret

printRoutine:
    _do
        ld A,(DE)
        call putc
        inc DE
        dec BC
        checkZeroWord B,C
    _until z
    _enddo
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; getKey -  inputs a line buffered character
; params: none
; returns: A = character,
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

getKey:
    push HL
    push DE
    push BC
    ld HL, (currkey)
    ld DE, (lineBufTop)
    or A
    sbc HL, DE                  ; exhausted the input lineBuf?
    _if nc
        ld HL, (lineBufStart)   ; lineBuf
        ld DE, (lineBufSize)    ; LINE_BUFSIZE
        call getline
        ld HL, lineBuf
        ld (currkey), HL
        or A
        adc HL, BC              ; lineBuf+DE = lineBufTop
        ld (lineBufTop),HL
    _endif
    ld HL, (currkey)
    ld A,(HL)               ; get next key from input lineBuf
    inc HL
    ld (currkey),HL         ; increment currkey
    pop BC
    pop DE
    pop HL
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Output pascal string ***
; params: DE = addr
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

printPStr:
    push AF
    push BC
    push DE
    ld A, (DE)
    ld C, A
    ld B, 0
    inc DE
    call printRoutine
    pop DE
    pop BC
    pop AF
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Output string
; params: DE = addr, BC = length
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

printStr:
    push AF
    push BC
    push DE
    call printRoutine
    pop DE
    pop BC
    pop AF
    ret

printCR:
    push DE
    ld DE,TXT_NEWLINE
    call printPStr
    pop DE
    ret

printSpace:
    push AF
    ld A," "
    call putc
    pop AF
    ret

